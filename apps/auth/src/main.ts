import { NestFactory } from '@nestjs/core';
import { AuthModule } from './auth.module';
import { Logger } from 'nestjs-pino';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import * as cookieParser from 'cookie-parser';
import { MicroserviceOptions, Transport } from '@nestjs/microservices';
import { ConfigService } from '@nestjs/config';

async function bootstrap() {
  const app = await NestFactory.create(AuthModule);
  const configService = app.get(ConfigService);

  app.connectMicroservice<MicroserviceOptions>({
    transport: Transport.TCP,
    options: {
      host: '0.0.0.0',
      port: configService.get<number>('TCP_PORT'),
    },
  });

  app.useLogger(app.get(Logger));

  // Use cookie parser middleware to handle cookies
  app.use(cookieParser());

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // remove properties that are not decorated with @IsDefined, @IsString, etc.
      transform: true, // automatically transform payloads to DTO instances
    }),
  );

  // Swagger setup can be added here if needed
  const config = new DocumentBuilder()
    .setTitle('API Documentation')
    .setDescription('API documentation automatically generated by Swagger')
    .setVersion('1.0')
    .addTag('auth') // tag used to group routes
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document); // /api is the path for the documentation

  await app.startAllMicroservices();

  // If you want to enable CORS, uncomment the following line
  // app.enableCors();

  // If you want to enable Helmet for security, uncomment the following line
  // app.use(helmet());

  // If you want to enable compression, uncomment the following line
  // app.use(compression());

  // If you want to enable body parser, uncomment the following line
  // app.use(bodyParser.json()); // available by default in NestJS

  // If you want to enable static assets serving, uncomment the following line
  // app.useStaticAssets(join(__dirname, '..', 'public'));

  // If you want to enable session management, uncomment the following lines
  // const session = require('express-session');
  // app.use(
  //   session({
  //     secret: 'your-secret-key',
  //     resave: false,
  //     saveUninitialized: true,
  //     cookie: { secure: false }, // set to true if using HTTPS
  //   }),
  // );

  // If you want to enable CSRF protection, uncomment the following lines
  // const csrf = require('csurf');
  // app.use(csrf({ cookie: true })); // use cookie-based CSRF protection

  // If you want to enable logging, uncomment the following line
  // app.useLogger(app.get(Logger));

  // If you want to enable global filters, uncomment the following lines
  // app.useGlobalFilters(new HttpExceptionFilter());

  // If you want to enable global interceptors, uncomment the following lines
  // app.useGlobalInterceptors(new LoggingInterceptor());

  // If you want to enable global guards, uncomment the following lines
  // app.useGlobalGuards(new AuthGuard());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ValidationPipe());

  // If you want to enable global interceptors, uncomment the following lines
  // app.useGlobalInterceptors(new TransformInterceptor());

  // If you want to enable global exception filters, uncomment the following lines
  // app.useGlobalFilters(new AllExceptionsFilter());

  // If you want to enable global guards, uncomment the following lines
  // app.useGlobalGuards(new RolesGuard());

  // If you want to enable global interceptors, uncomment the following lines
  // app.useGlobalInterceptors(new CacheInterceptor());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ParseIntPipe());

  // If you want to enable global interceptors, uncomment the following lines
  // app.useGlobalInterceptors(new TimeoutInterceptor());

  // If you want to enable global guards, uncomment the following lines
  // app.useGlobalGuards(new ThrottlerGuard());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ParseBoolPipe());

  // If you want to enable global filters, uncomment the following lines
  // app.useGlobalFilters(new TransformInterceptor());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ParseArrayPipe());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ParseUUIDPipe());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ParseEnumPipe());

  // If you want to enable global pipes, uncomment the following lines
  // app.useGlobalPipes(new ParseFilePipe());

  await app.listen(configService.get<number>('HTTP_PORT') ?? 3001);
}

bootstrap();
